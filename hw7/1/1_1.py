#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  4 12:02:01 2019

@author: alankar
"""

import numpy as np

def gen_LU(A):
    A = np.array(A,dtype=np.float64)
    R,C = A.shape
    if (R!=C): 
        print('Square Matrix is required!')
        return (None,None)
    L = np.identity(C)
    U = np.copy(A)
    for i in range(0,C-1):
        j = 1
        while(i+j<R):
            L[i+j,i] = U[i+j,i]/U[i,i]
            U[i+j,:] = U[i+j,:]-(U[i,:]/U[i,i])*U[i+j,i]
            j+=1            
    return (L,U)

def SolveLinearSystem_LU(A, b): #No pivoting
    n = A.shape[0]
    """
    global lu
    lu = np.zeros((n, n)) #This matix is L+U-I
    for i in range(0,n):
        for j in range(i,n):
            accumulator = 0
            for k in range(0,i+1):
                accumulator += lu[i, k] * lu[k, j]
            lu[i, j] = A[i, j] - accumulator
        for j in range(i+1,n):
            accumulator = 0
            for k in range(0,i+1):
                accumulator += lu[j, k] * lu[k, i]
            lu[j, i] = (1 / lu[i, i]) * (A[j, i] - accumulator)
    """
    
    L,U = gen_LU(A)
    lu = L + U - np.identity(n) #This matix is L+U-I
    
    # find solution of Ly = b (Forward Substitution)
    y = np.zeros((n, 1))
    for i in range(0,n):
        accumulator = 0
        for k in range(0,i+1):
            accumulator += lu[i, k] * y[k]
        y[i] = b[i] - accumulator
        
    # find solution of Ux = y  (Backward Substitution)
    x = np.zeros((n, 1))
    for i in range(n-1,-1,-1):
        accumulator = 0
        for k in range(i+1,n):
            accumulator += lu[i, k] * x[k]
        x[i] = (1 / lu[i, i]) * (y[i] - accumulator)
        
    return x

"""
A = np.array([[1,4,-3],
              [-2,8,5],
              [3,4,7]
        ])
""" 

np.random.seed(10)    
B = 2*np.diag(np.full(200,1.0))+np.random.rand(200, 200)/np.sqrt(200)
A = (B+B.T)/2
b = np.ones((200,1))
#A = np.array([[2,6],[5,8]])
#b = np.array([[4],[9]])
x = SolveLinearSystem_LU(A, b)
print('Solution is: ')
print(x)
            
"""
Output:

Solution is: 
[[0.12424086]
 [0.11158842]
 [0.11452858]
 [0.10929843]
 [0.12915824]
 [0.10477117]
 [0.10278857]
 [0.08881433]
 [0.12065055]
 [0.10357319]
 [0.10580459]
 [0.1301515 ]
 [0.10783228]
 [0.10138217]
 [0.10616056]
 [0.09014156]
 [0.12228283]
 [0.09849329]
 [0.10902939]
 [0.11987073]
 [0.12785513]
 [0.10679161]
 [0.10752942]
 [0.12485315]
 [0.12204647]
 [0.11285987]
 [0.12672504]
 [0.10187971]
 [0.10827349]
 [0.10597235]
 [0.10961332]
 [0.11853027]
 [0.1154878 ]
 [0.11436055]
 [0.13379428]
 [0.13305758]
 [0.10565514]
 [0.10885163]
 [0.09628808]
 [0.1210883 ]
 [0.12004806]
 [0.10951068]
 [0.09224765]
 [0.12446767]
 [0.09771251]
 [0.09876302]
 [0.1059406 ]
 [0.10558778]
 [0.10364245]
 [0.10951568]
 [0.11830289]
 [0.09580246]
 [0.08972947]
 [0.09358343]
 [0.10490645]
 [0.10754473]
 [0.10508232]
 [0.10298787]
 [0.10717022]
 [0.11610298]
 [0.10270583]
 [0.11616706]
 [0.09800513]
 [0.09586942]
 [0.11211126]
 [0.12067422]
 [0.10781891]
 [0.11554491]
 [0.09235563]
 [0.10449606]
 [0.11527018]
 [0.11728215]
 [0.09771085]
 [0.09975688]
 [0.0903229 ]
 [0.115312  ]
 [0.12060177]
 [0.12137036]
 [0.11594032]
 [0.12561376]
 [0.11907983]
 [0.11736927]
 [0.0994702 ]
 [0.11447783]
 [0.11459672]
 [0.10863757]
 [0.09551966]
 [0.11730068]
 [0.11272434]
 [0.11423174]
 [0.11273244]
 [0.11940877]
 [0.09878494]
 [0.12405231]
 [0.0986033 ]
 [0.09175356]
 [0.10150438]
 [0.12235555]
 [0.10912932]
 [0.10817238]
 [0.12734287]
 [0.11659671]
 [0.11378558]
 [0.11163094]
 [0.09629401]
 [0.09305259]
 [0.11325623]
 [0.11832692]
 [0.11104919]
 [0.11322784]
 [0.09083158]
 [0.11708193]
 [0.10523694]
 [0.10259608]
 [0.1287126 ]
 [0.09351686]
 [0.11932195]
 [0.10517811]
 [0.11224305]
 [0.12651011]
 [0.11332846]
 [0.09021902]
 [0.11290645]
 [0.13223627]
 [0.11199302]
 [0.10575047]
 [0.10510991]
 [0.11584443]
 [0.10103599]
 [0.11356804]
 [0.13899461]
 [0.09656614]
 [0.09643209]
 [0.12710391]
 [0.10425777]
 [0.10553097]
 [0.11844638]
 [0.12258394]
 [0.12181785]
 [0.09387375]
 [0.11602469]
 [0.10027508]
 [0.105989  ]
 [0.09437021]
 [0.12036168]
 [0.12193378]
 [0.12450332]
 [0.11266347]
 [0.10069245]
 [0.11622506]
 [0.09359835]
 [0.10815322]
 [0.11264865]
 [0.09990058]
 [0.11416271]
 [0.1388356 ]
 [0.11105579]
 [0.08672578]
 [0.11980292]
 [0.10111767]
 [0.1131748 ]
 [0.11442184]
 [0.12516853]
 [0.10238423]
 [0.1086082 ]
 [0.10162525]
 [0.10369873]
 [0.09265467]
 [0.12761267]
 [0.10837365]
 [0.11763512]
 [0.13182732]
 [0.11155669]
 [0.1009033 ]
 [0.12124854]
 [0.10932158]
 [0.12089276]
 [0.10301554]
 [0.11850245]
 [0.11405504]
 [0.12085009]
 [0.0811881 ]
 [0.13354747]
 [0.11436769]
 [0.11446969]
 [0.12131682]
 [0.12030028]
 [0.11813221]
 [0.10634058]
 [0.12250566]
 [0.09588784]
 [0.13793102]
 [0.10187833]
 [0.10907261]
 [0.10732158]
 [0.11966989]
 [0.09858356]
 [0.12269175]
 [0.09655738]
 [0.10314609]]
"""
